#! /usr/bin/perl

use MP3::Tag;
use Audio::FLAC::Header;
use Getopt::Long;
use Unicode::String;
use File::Spec;
use File::Path;
use Cwd;

# Set up options processing
$basedir	= "/music/MP3";
$variousArtists	= "VariousArtists";
$utf8		= 1;
$compilation	= 0;
$dorename	= 1;
$cleanUp	= 0;
@dragfiles	= ();

$result = GetOptions(
		     "utf8!" =>	\$utf8,
		     "base=s" => \$basedir,
		     "compilation" => \$compilation,
		     "various=s" => \$variousArtists,
		     "drag=s"	=> \@dragfiles,
		     "rename!" => \$dorename,
		     "clean" => \$cleanUp,
		     "help" => \$help
		     );

if (!$result)
{
    print "Invalid options\n";
}

if ($help || !$result) {
    usage();
    exit;
}

if (@dragfiles == 0) { @dragfiles = ("cover.jpg"); }

@dragfiles = split(/,/,join(',',@dragfiles));

## Now, parse the various files
foreach $file (@ARGV)
{
    if (-d $file) { 
	reorgDir($file);
    } else {
	renameFile($file);
    }
}




$numFailures;

sub reorgDir {
    my $file = shift;
    opendir DIRHANDLE, "$file" || die "Could not open directory $file\n";
    my @names = readdir(DIRHANDLE);
    closedir DIRHANDLE;

    foreach my $name (File::Spec->no_upwards(@names)) {
	my $path = File::Spec->catfile($file, $name);
	next unless (-e $path);
	if (-d $path) {
	    reorgDir($path);
	} else {
	    renameFile($path);
	}
    }
}

sub renameFile {
    my $file = shift;
    my $result;
    if ($file =~ /\.mp3$/) {
	$result = renameMP3($file);
    } elsif ($file =~ /\.flac$/) {
	$result = renameFLAC($file)
    } else {
	print "$file: Not tagged type\n";
	return;
    }
    if ($result ne 0)
    {
	chomp $result;
	print $result, "\n";
	$numFailures++;
    }
}

sub renameFLAC {
    my $file = shift;
    my $vaTag = 0;
    my $flac = Audio::FLAC::Header->new($file) || return "Could not read tags from $file";
    my $tags = $flac->tags() || return "No tags found in $file";
    my $artist = latin1(munge($tags->{"ARTIST"})) || return "No artist tag in $file";
    my $album  = latin1(munge($tags->{"ALBUM"}))  || return "No album tag in $file";
    my $title  = latin1(munge($tags->{"TITLE"}))  || return "No title tag in $file";
    my $track  = $tags->{"TRACKNUMBER"} || return "No track tag in $file";;
    my $vaTag = 1 if (defined $tags->{"COMPILATION"});
    doRename($file, $artist, $album, $title, $track, $vaTag, ".flac");
}

sub renameMP3 {
    my $file = shift;
    my $vaTag = 0;
    my $mp3 = MP3::Tag->new($file)      || return "Could not read $file";
    $mp3->get_tags()                    || return "Could not get tags in $file";
    my $artist = utf8(munge($mp3->artist())) || return "No artist tag in $file";
    my $album  = utf8(munge($mp3->album()))  || return "No album tag in $file";
    my $title  = utf8(munge($mp3->title()))  || return "No title tag in $file";	
    my $track  = $mp3->track()		     || return "No track tag in $file";

    my $id3v2 = $mp3->{ID3v2};
    my ($info, $name, @rest) = $id3v2->get_frame("TCMP") if (defined $id3v2);
    my $vaTag = 1 if (defined $info);

    doRename($file, $artist, $album, $title, $track, $vaTag, ".mp3");
}

sub doRename {
    my ($file, $artist, $album, $title, $track, $varArtists, $suffix) = @_;

    $artist = $variousArtists if ($varArtists || $compilation || $file =~ /$variousArtists\//);

    $track = int($track);
    $track = "0$track" if ($track < 10);

    my $newfile = "$track.$title$suffix";
    my $newdir = File::Spec->catdir($basedir,$artist,$album);
    my $newpath = File::Spec->catfile($newdir, $newfile);
    if (Cwd::realpath($file) eq Cwd::realpath($newpath)) {
	print "Not moving $file.  Name not changed\n";
	return 0;
    }
    print "Moving $file to $newpath\n";
    if ($dorename) {
	mkpath($newdir) || return "Could not create directory $newdir" unless (-d $newdir);
    }
    if (-e $newpath) {
	return "$file Target $newpath exists.  Not moved."
    } else {
	rename $file, $newpath if ($dorename) || return "Could not move $file to $newpath\n";
    }
    drag($file, $newdir);
    purgeDir($file) if ($cleanUp);
    0;
}

sub purgeDir {
    my $file = shift;
    my ($sink, $dir, $sink) = File::Spec->splitpath($file);
    opendir (DIR, $dir) || return;
    my $numFiles = File::Spec->no_upwards(readdir(DIR));
    closedir DIR;
    if ($numFiles == 0) {
	print "Removing empty directory $dir\n";
	rmtree($dir);
    }
}

$lastOldDir = undef;
$lastNewDir = undef;

sub drag {
    my ($file, $newdir) = @_;
    my ($sink, $olddir, $sink) = File::Spec->splitpath($file);
    if (($olddir ne $lastOldDir) || ($newdir ne $lastNewDir)) {
	doDrag($olddir, $newdir);
	$lastOldDir = $olddir;
	$lastNewDir = $newdir;
    }
}

sub doDrag {
    my ($olddir, $newdir) = @_;
    foreach my $file (@dragfiles) {
	my $oldpath = File::Spec->catfile($olddir, $file);
	if (-e $oldpath) {
	    my $newpath = File::Spec->catfile($newdir, $file);
	    if (Cwd::realpath($oldpath) eq Cwd::realpath($newpath)) {
		print "Not moving $oldpath.  Name not changed\n";
		next;
	    }
	    print "Dragging $oldpath to $newpath\n";
	    if ($dorename) {
		mkpath($newdir) || return "Could not create directory $newdir" unless (-d $newdir);
	    }
	    if (-e $newpath) {
		return "$file Target $newpath exists.  Not moved."
	    } else {
		rename $oldpath, $newpath if ($dorename) || die "Could not move $oldpath to $newpath\n";
	    }
	}
    }
}

sub munge {
    #echo "$@" | sed s,:,\ -,g | tr \ / __ | tr -d \'\"\?\[:cntrl:\]
    my $name = shift;
    $name =~ s/[\"\'\?]//g;
    $name =~ s/[ \/]/_/g;
    $name =~ s/:/_-/g;
    return $name;
}
sub utf8 {
    my $name = shift;
    return undef if (!defined $name);
    $name = Unicode::String::latin1($name)->utf8() if ($utf8);
    return $name;
}
sub latin1 {
    my $name = shift;
    return undef if (!defined $name);
    $name = Unicode::String::utf8($name)->latin1() if (!$utf8);
    return $name;
}


sub usage {
    print <DATA>;
}
__DATA__
	-u	--utf8		Create target filenames in UTF8
	-b path	--base=path	Create Targets in path.  Must be in the same filesystem as originals.
	-v name	--various=name	Name of Various Artists directory.
	-d 	--drag=s	Drag files with this name along with music files.  Multiple can be specified.
	-r	--rename	Actually do the rename (--norename for dry run)
	-h	--help		This screen.
