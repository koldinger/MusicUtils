#! /usr/bin/perl
# Copyright Eric Koldinger, 2006
# kolding @ koldware.com
# No warranty, expressed, or implied, if you use this program.  Author is not responsible for any
# damage it may do to your files or sanity.

use lib $ENV{HOME} . "/dev/MusicUtils";
use MP3::Tag;
use Audio::FLAC::Header;
use Getopt::Long;
use Unicode::String;
use File::Spec;
use ClassicalDB;

# Set up options processing
$cddbDir	= $ENV{"HOME"} . "/.cddb";
$dbFile		= "disc.json";
$trackNumber	= undef;
$discNumber	= undef;
$preserveTS	= 1;
$utf8		= 0;
$help		= 0;

$globalCDDB	= undef;

$result = GetOptions(
		     "file=s" => \$dbFile,
		     "preserve!" => \$preserveTS,
		     "track=i" => \$trackNumber,
		     "disc=i" => \$discNumber,
		     "utf8!" =>	\$utf8,
		     "help" => \$help
		     );

@deleteFLAC = qw(ARTIST ALBUM TITLE PART YEAR DATE COMPOSER CONDUCTOR BAND ENSEMBLE ARTISTSORT);
@deleteMP3 = qw(TPE1 TPE2 TPE3 TIT1 TIT2 TIT3 TCOM TCON TALB TPOS TYER TPUB TSOP);

%mp3TagMapping = (
    'GROUP' 		=> 'TIT1',
    'TITLE' 		=> 'TIT2' ,
    'PART' 		=> 'TIT3' ,
    'ARTIST' 		=> 'TPE1' ,
    'BAND' 		=> 'TPE2' ,
    'CONDUCTOR' 	=> 'TPE3' ,
    'ALBUM' 		=> 'TALB' ,
    'YEAR' 		=> 'TYER' ,
    'COMMENT' 		=> 'COMM' ,
    'TRACKNUMBER' 	=> 'TRCK' ,
    'GENRE' 		=> 'TCON' ,
    'LABEL' 		=> 'TPUB' ,
    'COMPOSER' 		=> 'TCOM' ,
    'GENRE' 		=> 'TCON' ,
    'DISCNUMBER' 	=> 'TPOS' ,
    'DISKNUMBER' 	=> 'TPOS' ,
    'SET' 		=> 'TPOS' ,
    'COMPILATION'	=> 'TCMP' ,
    'ARTISTSORT'	=> 'TSOP'
);

if (!$result)
{
    print "Invalid options\n";
}

if ($help || !$result) {
    usage();
    exit;
}

$numFailures = 0;
$classDB = ClassicalDB->parse($dbFile);

## Now, parse the various files
foreach $file (@ARGV)
{
    my $result = 0;
    my $mtime, $atime;

    if ($preserveTS) {
	@stats = stat($file);
	$atime = $stats[8];
	$mtime = $stats[9];
    }

    $result = setTagsMP3($file, $trackNumber) if ($file =~ /.mp3$/);
    $result = setTagsFLAC($file, $trackNumber) if ($file =~ /.flac$/);

    utime $mtime, $mtime, $file if ($preserveTS);

    if ($result ne 0)
    {
	chomp $result;
	print $result, "\n";
	$numFailures++;
    }
}

$numFailures;

sub setTagsFLAC {
    my ($file, $track) = @_;
    print "Setting tags in $file\n";

    my $flac = Audio::FLAC::Header->new($file);
    my $tags = $flac->tags();

    my $track 	= $trackNumber;

    if (!defined $track)
    {
	$track = $tags->{"TRACKNUMBER"} || return "Could not get track in $file.  Must set on command line\n";
	$track =~ int $track;
    }

    $trackInfo = $classDB->getTrack($track) || return "Could not find info for Track $track\n";

    foreach my $key (@deleteFLAC) {
	delete $tags->{$key};
    }

    foreach my $key (keys %$trackInfo) {
	next unless defined ($trackInfo->{$key});
	#print "Setting tag $key to ", $trackInfo->{$key}, "\n";
	$tags->{$key} = $trackInfo->{$key};
    }

    my $result = 0;
    my $result = $flac->write();
    return "Unable to write flac tag in $file.  Result: $result" if ($result);
    0;
}

sub setTagsMP3 {
    my ($file, $track) = @_;
    print "Setting tags in $file\n";

    my $mp3 = MP3::Tag->new($file) 	|| return "Could not read $file\n";
    $mp3->get_tags()	  		|| return "Could not get tags in $file\n";

    my $id3v2 = $mp3->{ID3v2};
    my $id3v1 = $mp3->{ID3v1};

    my $track 	= $trackNumber;

    if (!defined $track)
    {
	$track = int($mp3->track()) || return "Could not get track in $file.  Must set on command line\n";
    }


    $trackInfo = $classDB->getTrack($track) || return "Could not find info for Track $track\n";

    # remove ID3v1.  We don't need it.
    $id3v1->remove_tag() if (defined $id3v1);

    $id3v2 = $mp3->new_tag("ID3v2") if (!defined $id3v2);

    foreach my $key (@deleteMP3) {
	$id3v2->remove_frame($key);
    }

    foreach my $key (keys %$trackInfo) {
	next unless defined ($trackInfo->{$key});
	next if ($key eq "TRACKNUMBER");
	#print "Setting tag $key $mp3TagMapping{$key} to ", $trackInfo->{$key}, "\n";
	$id3v2->add_frame($mp3TagMapping{$key}, Unicode::String::utf8($trackInfo->{$key})->latin1());
    }

    # $id3v2->add_frame("TRCK", $trackInfo->number() . "/" . $cddb->track_count());
    # TIT2 (Title/songname/content description): 51 Phantom
    # TPE1 (Lead performer(s)/Soloist(s)): North Mississippi Allstars
    # TALB (Album/Movie/Show title): 51 Phantom
    # TCON (Content type): Blues (0)
    # TYER (Year): 2001
    # TSIZ (Size): 128
    # TRCK (Track number/Position in set): 1
    # USER (Terms of use):  frame
    $id3v2->write_tag();

    $mp3->close();
    0;
}

#
# Parse the title string.  Look for Disc X of Y, or Disc X.
# If it exists, pull it out, and return it as a position tag in a set.
#
sub parseTitle {
    my $title = shift;
    my $pos = undef;
    if ($title =~ /\s*(.*\w)\s*[\(\[]\s*[Dd]is[ck]\s*([0-9]+)\s*of\s*([0-9]+)\s*[\)\]]/) {
	$title = $1;
	$pos = "$2/$3";
    } elsif ($title =~ /\s*(.*\w)\s*[\(\[]\s*[Dd]is[ck]\s*([0-9]+)\s*[\)\]]/) {
	$title = $1;
	$pos = "$2";
    }

    return ($title, $pos);
}

sub trim {
    my $line = shift;
    $line = s/^\s+//;
    $line = s/\s+//;
    return $line;
}

sub translate {
    my $string = shift;
    if ($utf8) {
	$string = Unicode::String::utf8($string)->latin1();
    } 
    $string;
}

sub usage {
    print <DATA>;
}
__DATA__
	-d CDDB	--db=s		Where to find the CDDB database.
	-c file	--cddb=file	Explicit file to read data from.
	-i ID	--id=id		CDDB ID to use istead of from current tag.
	-t trk	--track=trk	Track number to use instead of from current tag.
	-p      --preserv	Preserve timestamps
	-h	--help		This screen.
