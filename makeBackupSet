#! /usr/bin/perl

use Getopt::Long;
use File::Spec;
use Cwd;

## Constants
$cdsize		= 640000;
$dvdsize	= 4500000;
$dvd2size	= 8500000;

## Globals
$maxDisc	= 0;
$firstDisc	= undef;
$newMaxDisc	= undef;
$discsCreated	= 0;

## Options, w/ default values
$database	= "BackupDB";
$verbose	= 0;
$help		= 0;
$cd		= 0;
$dvd		= 0;
$dvd2		= 0;
$size		= 0;
$keepDirs	= 0;
$pack		= 0;
$fill		= 0;
$update		= 0;
$reset		= 0;
$abspath	= 0;
$stats		= 0;

$result = GetOptions(
                     "verbose+" 	=> \$verbose,
                     "database|db=s" 	=> \$database,
		     "keepdirs!"	=> \$keepDirs,
		     "pack!"		=> \$pack,
		     "fill!"		=> \$fill,
		     "abspaths!"	=> \$abspath,
		     "cd"		=> \$cd,
		     "dvd"		=> \$dvd,
		     "dvd2"		=> \$dvd2,
		     "size=i"		=> \$size,
		     "update!"		=> \$update,
		     "reset!"		=> \$reset,
		     "stats"		=> \$stats,
                     "help"		=> \$help
                     );

if (!$result) {
    print "GetOptions failed: $result\n";
}
if ($cd + $dvd + $dvd2 > 1) {
    print "Only one of --cd, --dvd, and --dvd2 allowed\n";
    $result = 0;
}
if ($size && ($cd || $dvd || $dvd2)) {
    print "Can't set size and disc type\n";
    $result = 0;
}
if ($help || !$result) {
    usage();
    exit;
}

$discSize = $dvdsize;
$discSize = $cdsize if ($cd);
$discSize = $dvdsize if ($dvd);
$discSize = $dvd2size if ($dvd2);
$discSize = $size if ($size);

$backup = $database.".bak";

loadDB($database);
foreach $dir (@ARGV) {
    addDir($dir);
}

if ($fill) {
    print "Setting fill discs to " . int($maxDisc) . "\n";
    $firstDisc = $maxDisc;
    $newMaxDisc = $maxDisc;
}
resetDiscs() if ($resetDB);
updateDB() if ($update);

makeDiscs();

rename($database, $backup);
saveDB($database);

dumpSpace() if ($stats);

sub addDir {
    my $dir = shift;
    my @dirs = ();
    print ("Processing directory $dir\n") if ($verbose > 1);
    opendir(DIRHANDLE, "$dir") || die "Could not open directory $dir\n";
    my @names = readdir(DIRHANDLE);
    closedir(DIRHANDLE);

    foreach my $name (File::Spec->no_upwards(@names)) {
	my $file = File::Spec->canonpath(File::Spec->catfile($dir, $name));
	if (-d $file) {
	    push @dirs, $file;
	} else {
	    my ($dev, $ino, $mode, $nlink, $uid, $gid, $rdev,
		$size, $atime, $mtime, $ctime, $blksize, $blocks) = stat($file);
	    if (!defined $DB{$file} || $DB{$file}->{"mtime"} != $mtime || $DB{$file}->{"size"} != $size) {
		print ("New file $file\n") if ($verbose > 1 && !(defined $DB{$file}));
		print ("Updated file $file\n") if ($verbose > 1 && (defined $DB{$file}));
		if ($size > ($discSize * 1024)) {
		    print "WARNING: $file is too big to fit on disc.  Skipping.\n";
		} else {
		    addFile($file, $size, $mtime, $dir, 0);
		}
	    }
	}
    }
    foreach $name (@dirs) {
	addDir($name);
    }
}

sub updateDB {
    foreach my $file (sort { $a cmp $b; } (keys %DB)) {
	my ($dev, $ino, $mode, $nlink, $uid, $gid, $rdev,
	    $size, $atime, $mtime, $ctime, $blksize, $blocks) = stat($file);
	next if (!defined $size);
	if ( $DB{$file}->{"mtime"} != $mtime || $DB{$file}->{"size"} != $size) {
	    if ($DB{$file}->{"disc"} == 0) {
		delete $DB{$file};
		print ("Deleted file $file\n") if ($verbose > 1);
	    } else {
		print ("Updated file $file\n") if ($verbose > 1);
		addFile($file, $size, $mtime, $dir, 0);
	    }
	}
    }
}

sub loadDB {
    my $db = shift;
    open DBFILE, "< $db" || return;
    while (<DBFILE>) {
	chomp;
	my ($size, $mtime, $disc, $file) = split (/\|/);
	$dir = $file;
	$dir =~ s/\/[^\/]+$//g;
	print "Loading $file\n" if ($verbose > 2);
	addFile($file, $size, $mtime, $dir, int($disc));
    }
    close DBFILE;
    dumpSpace() if ($verbose > 2);
}

sub dumpSpace {
    foreach my $key (sort {$a <=> $b} keys %DISCS) {
	print "$key : Files: " . $DISCS{$key}->{"files"} .  " Space: " . int($DISCS{$key}->{"used"}) . " KB\n";
    }
}

sub saveDB {
    my $db = shift;
    open DBFILE, "> $db" || die "Could not save database";
    foreach my $file (sort { $a cmp $b; } (keys %DB)) {
	printf DBFILE "%10d|%10d|%4d|%s\n",
	    $DB{$file}->{"size"},
	    $DB{$file}->{"mtime"},
	    $DB{$file}->{"disc"},
	    $DB{$file}->{"file"};
    }
}

sub resetDiscs {
    print "Resetting Discs\n" if ($verbose);
    foreach my $file ( (keys %DB)) {
	$DB{$file}->{"disc"} = 0;
    }
    $maxDisc = 0;
    $newMaxDisc = undef;
    $firstDisc  = undef;
    %DISCS = undef;
}

sub makeDiscs {
    my $added = 0;
    foreach my $file ( sort { $a cmp $b; } (keys %DB)) {
	if ($DB{$file}->{"disc"} == 0) {
	    my @files = collectDir($file);
	    my $size = totalSize(@files);
	    my $disc = findDisc($size);
	    foreach my $file2 (@files) {
		print "Adding file $file2 to disc $disc\n" if ($verbose > 1);
		my $fileSize = kSize($file2);
		if (($DISCS{$disc}->{"used"} + $kSize) > $discSize) {
		    $disc = newDisc();
		}
		## If it's not already on this disc, add it to this disc
		if ($DB{$file2}->{"disc"} != $disc) {
		    my $oldDisc = $DB{$file2}->{"disc"};
		    $DISCS{$oldDisc}->{"files"} --;
		    $added ++;
		    $DISCS{$disc}->{"used"} += $fileSize;
		    $DISCS{$disc}->{"altered"} = 1;
		    $DISCS{$disc}->{"files"} ++;
		    $DB{$file2}->{"disc"} = $disc;
		}
	    }
	}
    }
    print "Added $added files.\n" if ($verbose);
    if ($added) {
	print "Created " . $discsCreated . " new discs\n" if ($verbose);
    }
}

sub collectDir {
    my $file = shift;
    if (!$keepDirs)
    {
	# return a list containing only 1 file.
	return ($file);
    } else {
	return @{$DIR{$DB{$file}->{"dir"}}};
    }
}

sub totalSize {
    my @files = @_;
    my $size = 0;
    foreach my $file (@files) {
	$size += kSize($file);
    }
    return $size;
}

sub addFile {
    my ($file, $size, $mtime, $dir, $disc) = @_;
    $file = File::Spec->canonpath($file);
    $file = Cwd::realpath($file) if ($abspath);
    $DB{$file} = {
	"file"  => $file,
	"size"  => $size,
	"mtime" => $mtime,
	"dir"   => $dir,
	"disc"  => $disc
	};
    if (!defined $DIR{$dir}) {
	$DIR{$dir} = [ $file ];
    } else {
	push @{$DIR{$dir}}, $file unless contains ($file, @{$DIR{$dir}});
    }
    if (defined $disc) {
	$DISCS{$disc}->{"used"} += kSize($file);
	$DISCS{$disc}->{"altered"} = 0;
	$DISCS{$disc}->{"files"} += 1;
	$maxDisc = $disc if ($disc > $maxDisc);
    }
}

sub findDisc {
    my $size = shift;
    my $disc;
    if ($pack && defined $firstDisc) {
	foreach $disc ($firstDisc .. $newMaxDisc) {
	    my $available = $discSize - $DISCS{$disc}->{"used"};
	    print "Checking Disc $disc for " . int($size) . " Bytes. " .
		  "Current usage: " . int($DISCS{$disc}->{"used"}) .  " " .
		  "Available " . $available . "\n"
		if ($verbose > 1);
	    if (($DISCS{$disc}->{"used"} + $size) < $discSize) {
		return $disc;
	    }
	}
    }
    if (!defined $newMaxDisc) {
	newDisc();
    }
    $disc = $newMaxDisc;
    if (($DISCS{$disc}->{"used"} + $size) > $discSize) {
	return newDisc();
    }
    return $disc;
}

sub newDisc {
    $newMaxDisc = $maxDisc if (!defined $newMaxDisc);
    $newMaxDisc++;
    $firstDisc = $newMaxDisc if (!defined $firstDisc);
    $discsCreated++;
    $DISCS{$newMaxDisc} = {"altered" => 0, "used" => 0, "files" => 0 };
    return $newMaxDisc;
}

sub kSize {
    my $file = shift;
    return ($DB{$file}->{"size"} + 1024) /1024;
}

sub contains {
    my $lookFor = shift;
    foreach my $element (@_)
    {
	return 1 if ($lookFor eq $element);
    }
    return 0;
}

sub usage {
    print <DATA>;
}
__DATA__
	-v	--verbose	print more information
	-d	--database	database to use.  Default is Backup.
	-k	--keepdirs	Keep directories packaged together
	-p	--pack		Attempt to pack disks.
	-f	--fill		Continue to fill last disc.
		--cd		Package for CD's.
		--dvd		Package for DVD's
		--dvd2		Package for Dual Layer DVD's
	-s	--size		Package for size K disks
	-r	--resetDB	
	-h	--help		This screen.
