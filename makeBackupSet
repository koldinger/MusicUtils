#! /usr/bin/perl

use Getopt::Long;

## Constants
$cdsize		= 650000;
$dvdsize	= 4500000;
$dvd2size	= 8500000;

## Globals
$maxDisc	= 0;
$newMaxDisc	= undef;

## Options, w/ default values
$database	= "BackupDB";
$verbose	= 0;
$help		= 0;
$cd		= 0;
$dvd		= 0;
$dvd2		= 0;
$size		= 0;
$keepDirs	= 0;
$pack		= 0;

$result = GetOptions(
                     "verbose!" => \$verbose,
                     "database=s" => \$database,
		     "keepdirs!" => \$keepDirs,
		     "pack" => \$pack,
		     "cd" => \$cd,
		     "dvd" => \$dvd,
		     "dvd2" => \$dvd2,
		     "size=i" => \$size,
                     "help" => \$help
                     );

if (!$result)
{
    print "GetOptions failed: $result\n";
}
if ($cd + $dvd + $dvd2 > 1) {
    print "Only one of --cd, --dvd, and --dvd2 allowed\n";
    $result = 0;
}
if ($size && ($cd || $dvd || $dvd2)) {
    print "Can't set size and disc type\n";
    $result = 0;
}
if ($help || !$result) {
    usage();
    exit;
}

$discSize = $dvdsize;
$discSize = $cdsize if ($cd);
$discSize = $dvdsize if ($dvd);
$discSize = $dvd2size if ($dvd2);
$discSize = $size if ($size);

$backup = $database.".bak";

loadDB($database);
foreach $dir (@ARGV) {
    addDir($dir);
}
makeDiscs();
rename($database, $backup);
saveDB($database);

sub addDir {
    my $dir = shift;
    my @dirs = ();
    print ("Processing directory $dir\n") if ($verbose);
    opendir(DIRHANDLE, "$dir") || die "Could not open directory $dir\n";
    my @names = readdir(DIRHANDLE);
    closedir(DIRHANDLE);

    foreach my $name (@names) {
	next if $name eq ".";
	next if $name eq "..";
	my $file = "$dir/$name";
	$file =~ s/\/\//\//g;
	if (-d $file) {
	    push @dirs, $file;
	} else {
	    my ($dev, $ino, $mode, $nlink, $uid, $gid, $rdev,
		$size, $atime, $mtime, $ctime, $blksize, $blocks) = stat($file);
	    if (!defined $DB{$file} ||
		$DB{$file}->{"mtime"} != $mtime ||
		$DB{$file}->{"size"} != $size) {
		print ("New file $file\n") if ($verbose && !(defined $DB{$file}));
		print ("Updated file $file\n") if ($verbose && (defined $DB{$file}));
		if ($size > ($discSize * 1024)) {
		    print "WARNING: $file is too big to fit on disc.  Skipping.\n";
		} else {
		    addFile($file, $size, $mtime, $dir, 0);
		}
	    }
	}
    }
    foreach $name (@dirs) {
	addDir($name);
    }
}

sub loadDB {
    my $db = shift;
    open DBFILE, "< $db" || return;
    while (<DBFILE>) {
	chomp;
	if (/^MAXDISC\s*\=\s*([0-9]+)\s*$/) {
	    $maxDisc = $1;
	    print ("Got MAXDISC=$maxDisc)\n") if ($verbose);
	    next;
	}
	if (/^DISC([0-9]+)\s*=\s*([0-9]+)\s*,\s*([0-9]+)\s*$/) {
	    my $disc = $1;
	    my $capacity = $2;
	    my $used = $3;
	    $DISCS{$disc} = { "capacity" => $capacity, "used" => $used };
	    print("Got DISC[$disc]: Capacity: $capacity Used: $used\n") if ($verbose);
	    next;
	}
	my ($size, $mtime, $disc, $file) = split (/\|/);
	$dir = $file;
	$dir =~ s/\/[^\/]+$//g;
	print "Loading $file, $dir\n" if ($verbose);
	addFile($file, $size, $mtime, $dir, $disc);
    }
    close DBFILE;
}

sub saveDB {
    my $db = shift;
    open DBFILE, "> $db" || die "Could not save database";
    print DBFILE "MAXDISC=$maxDisc\n";
    foreach my $disc (sort { $a <=> $b } keys %DISCS) {
	printf DBFILE "DISC%d=%d,%d\n", $disc, $DISCS{$disc}->{"capacity"} , $DISCS{$disc}->{"used"};
    }
    foreach my $file (sort { $a cmp $b; } (keys %DB)) {
	printf DBFILE "%10d|%10d|%4d|%s\n",
	    $DB{$file}->{"size"},
	    $DB{$file}->{"mtime"},
	    $DB{$file}->{"disc"},
	    $DB{$file}->{"file"};
    }
}

sub makeDiscs {
    my $added = 0;
    foreach $file ( sort { $a cmp $b; } (keys %DB)) {
	if ($DB{$file}->{"disc"} == 0) {
	    my @files = collectDir($file);
	    my $size = totalSize(@files);
	    print $size
	    $added += @files;
	    my $disc = findDisc($size);
	    foreach my $file2 (@files) {
		print "Adding file $file2 to disc $disc\n" if ($verbose);
		$addedd ++;
		my $fileSize = kSize($file2);
		if (($DISCS{$disc}->{"used"} + $kSize) > $DISCS{$disc}->{"capacity"}) {
		    $disc = newDisc();
		}
		$DB{$file2}->{"disc"} = $disc;
		$DISCS{$disc}->{"used"} += $fileSize;
	    }
	}
    }
    print "Added $added files.\n" if ($verbose);
    if ($added) {
	print "Created " . ($newMaxDisc - $maxDisc) . " new discs\n" if ($verbose);
	$maxDisc = $newMaxDisc;
    }
}

sub collectDir {
    my $file = shift;
    if (!$keepDirs)
    {
	# return a list containing only 1 file.
	return ($file);
    } else {
	return @{$DIR{$DB{$file}->{"dir"}}};
    }
}

sub totalSize {
    my @files = @_;
    my $size = 0;
    foreach my $file (@files) {
	$size += kSize($file);
    }
    return $size;
}

sub addFile {
    my ($file, $size, $mtime, $dir, $disc) = @_;
    $DB{$file} = {
	"file"  => $file,
	"size"  => $size,
	"mtime" => $mtime,
	"dir"   => $dir,
	"disc"  => $disc
	};
    if (!defined $DIR{$dir}) {
	$DIR{$dir} = [ $file ];
    } else {
	push @{$DIR{$dir}}, $file unless contains ($file, @{$DIR{$dir}});
    }
}

sub findDisc {
    my $size = shift;
    if (!defined $newMaxDisc) {
	newDisc();
    }
    my $disc;
    if ($pack) {
	foreach $disc (($maxDisc + 1) .. $newMaxDisc) {
	    if (($DISCS{$disc}->{"used"} + $size) < $DISCS{$disc}->{"capacity"}) {
		return $disc;
	    }
	}
    }
    $disc = $newMaxDisc;
    if (($DISCS{$disc}->{"used"} + $size) > $DISCS{$disc}->{"capacity"}) {
	return newDisc();
    }
    return $disc;
}

sub newDisc {
    if (!defined $newMaxDisc) {
	$newMaxDisc = $maxDisc;
    }
    $newMaxDisc++;
    $DISCS{$newMaxDisc} = {"capacity" => $discSize, "used" => 0 };
    return $newMaxDisc;
}

sub kSize {
    my $file = shift;
    return ($DB{$file}->{"size"} + 1024) /1024;
}

sub contains {
    my $lookFor = shift;
    foreach my $element (@_)
    {
	return 1 if ($lookFor eq $element);
    }
    return 0;
}

sub usage {
    print <DATA>;
}
__DATA__
	-v	--verbose	print more information
	-d	--database	database to use.  Default is Backup.
	-k	--keepdirs	Keep directories packaged together
	-p	--pack		Attempt to pack disks.
	-c	--cd		Package for CD's.
		--dvd		Package for DVD's
		--dvd2		Package for Dual Layer DVD's
	-s	--size		Package for size K disks
	-h	--help		This screen.
